@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject ISnackbar SnackBar

<MudDialog>
    <TitleContent>
        Product Details
    </TitleContent>
    <DialogContent>
        <EditForm Model="@Product">
            <div class="card">
                <div class="card-body">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label>Category</label>
                                <InputSelect class="form-control"
                                             Value="@Product.CategoryId"
                                             ValueChanged="@((int productCategoryId) => ProductCategoryHasChanged(productCategoryId))"
                                             ValueExpression="@(() => Product.CategoryId)">
                                    @foreach (var item in ProductCategories)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label>Product</label>
                                <InputSelect class="form-control" 
                                             Value="@Product.Id"
                                             ValueChanged="@((int productId) => ProductHasChanged(productId))"
                                             ValueExpression="() => Product.Id">
                                    @foreach (var item in Products)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label>Price</label>
                                @*<InputText class="form-control" disabled="true" @bind-Value="@Product.Price.ToString()" />*@
                                <MudNumericField Disabled="true" Label="Price" @bind-Value="@Product.Price" Variant="Variant.Outlined"/>
                                
                            </div>
                            <div class="col-md-6 mb-3">
                                <label>Quantity</label>
                                <MudNumericField @bind-Value="@Product.Quantity" Label="Quantity" Variant="Variant.Outlined" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddProduct">Add</MudButton>
    </DialogActions>
</MudDialog>


@code {
    public Product Product = new Product();
    public IEnumerable<ProductCategory> ProductCategories = new List<ProductCategory>();
    public IEnumerable<Product> Products = new List<Product>();
    public string Message { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            ProductCategories = await ProductCategoryService.GetProductCategories();

            if(ProductCategories != null && ProductCategories.Any())
            {
                await LoadProducts(ProductCategories.FirstOrDefault().Id);
            }
        }
        catch (Exception e)
        {
            Message = "There was an error on..." + e.Message;
        }
    }

    protected async Task ProductCategoryHasChanged(int productCategoryId)
    {
        Product.CategoryId = productCategoryId;
        if (Product.CategoryId > 0)
        {
            await LoadProducts(Product.CategoryId);
        }
    }

    protected async Task ProductHasChanged(int productId)
    {
        if (productId > 0)
        {
            Product = await ProductService.ProductGet(productId);
        }
    }

    private async Task LoadProducts(int productCategoryId)
    {
        Products = await ProductService.GetByCategory(productCategoryId);
        if(Products != null && Products.Any())
        {
            Product = await ProductService.ProductGet(Products.FirstOrDefault().Id);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private void AddProduct()
    {
        SnackBar.Add("Product added", Severity.Success, a => a.VisibleStateDuration = 200);

        MudDialog.Close(DialogResult.Ok(Product));
    }
}
